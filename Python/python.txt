->The Python Package Index (PyPI) is a repository of software for the Python programming language.
->To install modules of PYPI and other indexes we use pip.
->If we have python 2 and 3 to run python cmmnds with version 3 we use python3 in cmd.
->Python imports:
	->To import scripts from parent or sibling directories we should use packages(dir with __init__.py).

->Strings are immutable in Python, so any modification to a string creates a new string object.

->The Python logging module has four main parts:
  Loggers
  Handlers
  Filters
  Formatters:Formatters describe the format of the text which will be rendered.

	->Logger:If log level is the same or exceeds the log level of the logger, the message is sent to the handler for further processing. The log levels are:
  		DEBUG: Low-level system information
  		INFO: General system information
  		WARNING: Minor problems related information
  		ERROR: Major problems related information
  		CRITICAL: Critical problems related information

	->Handler: ERROR log level messages can be sent in real-time to the developer, while INFO log levels can just be stored in a system file.It essentially tells the system what to do with the message like writing it on the screen, a file, or to a network socket.

	->Filters:A filter can sit between a Logger and a Handler. It can be used to filter the log record.
  		For example: in CRITICAL messages, you can set a filter which only allows a particular source to be processed.

	->Python's own defaults send records to level warning and higher to console.

->A class method is a method that is bound to a class rather than its object. It doesn't require creation of a class instance, much like staticmethod.

	The difference between a static method and a class method is:
	->Static method knows nothing about the class and just deals with the parameters
	->Class method works with the class since its parameter is always the class itself.
	
	Example 1:
		class Person:
    		 age = 25

    		 def printAge(cls):
        	   print('The age is:', cls.age)
		 
                 @classmethod #classmethod decorator is needed else it will not be able to access class attributes
		 def printage2(cls):
		   print(cls.age)	

		# create printAge class method
		Person.printAge = classmethod(Person.printAge)
		Person.printage()
		Person.printage2()
		
		Output:
		The age is: 25
		25

->'_' special uses in python:
	->In interactive mode or during debugging sessions in Python’s interpreter, the underscore _ is used to hold the value of the last executed expression.
	->Formatting Large Numbers. Eg: amount = 1_000_000

->Zip helps in combining multiple iterables(list, tup, dict) into single iterable of tuples.
	Eg: unzipped = list(zip(*zipped)) #Unzipping zipped iterables.

->Unlike the .sort() method which modifies the list in place, sorted() works on any iterable and returns a new sorted list from the elements of any iterable, be it lists, tuples, dictionaries, or even custom objects.
	Eg 1: data = ['a5', 'a2', 'b1', 'b3', 'c2']
	      sorted_data = sorted(data, key=lambda x: (x[0], int(x[1:])))
	      print(sorted_data)  # Output: ['a2', 'a5', 'b1', 'b3', 'c2']
	Eg 2: 	employees = [
    		{'name': 'Alice', 'age': 30, 'salary': 80000},
    		{'name': 'Bob', 'age': 25, 'salary': 50000},
    		{'name': 'Charlie', 'age': 35, 'salary': 120000},
		]
		# Sort by age, then by salary if ages are the same
		sorted_employees = sorted(employees, key=lambda x: (x['age'], x['salary']))
		print(sorted_employees)

->The from __future__ import statement in Python is a critical tool for developers aiming to use newer Python features in older versions.
	from __future__ import division
	print(5 / 2)  # Outputs 2.5, not 2
->Generator: A way to write functions that can send back a value and later resume to pick up where they left off.
	Eg: def generate_infinite():
    		num = 0
    		while True:
       		  yield num
        	  num += 1
	    gen = generate_infinite()
	    print(next(gen))
	    print(next(gen))
	 ***# You can keep calling next() without worrying about running out of memory***

->We can use _ b/w numbers in new python version for readability.
->Python can understand oxa, hexa decimal values.
->We can use 3E8 to express (3*10)^8 in python.
->The result produced by the division operator is always a float .
->The file .pyc doesn't contain machine code - it's internal Python semi-compiled code, ready to be executed by Python's interpreter.
->The line starting with #! at start of module has many names - it may be called shabang, shebang, hashbang, poundbang or even hashpling (don't ask us why). The name itself means nothing here - its role is more important. From Python's point of view, it's just a comment as it starts with #. For Unix and Unix-like OSs (including MacOS) such a line instructs the OS how to execute the contents of the file.
->Use this to get the paths that are being searched for the modules.
	import sys
	for p in sys.path:
    	    print(p)
->we can use the path.append() method - in effect, the new path will occupy the last element in the path list; if you don't like the idea, you can use insert() instead.
->Use in if u want to check if single char exists it's faster, index() will return index but will raise error if not found, find() will return -1 if not found.
->raise and raise BaseException are same.
	->Exception is subset of BaseException.
->Python private variables can be accessed and modified outside of class using __dict__ or mangled name constructed as _ClassName__PrivatePropertyName.
->A class variable always presents the same value in all class instances (objects).
->If there is more than one class on a particular inheritance path, Python scans them from left to right.
->A generator returns a series of values, and in general, is (implicitly) invoked more than once.
	->range() is generator.
		->range(5) generator is invoked six times, providing five subsequent values from zero to four, and 		finally signaling that the series is complete.
->We can use os.system("") to execute os commands using python.
->Garbage collection: A way for a program to automatically release memory when the object taking up memory is no longer in use.
	Types:
	1. Reference counting.
	2. Tracing.
->Decorators:
	-Decorators receive the function to be decorated as an argument. This allows the decorator to modify or enhance the function’s behavior.
	-Decorators return a new function that wraps the original function. This new function adds additional behavior before or after the original function is called.
	-When a function is decorated, it is assigned to the variable name of the original function. This means the original function is replaced by the decorated (wrapped) function.
	-@decorator_name:This syntax applies the decorator to the function_to_decorate function. It is equivalent to writing function_to_decorate = decorator_name(function_to_decorate)
	=A decorator can be applied to multiple functions, promoting code reuse. Instead of writing the same code multiple times to modify different functions, you can write a decorator once and apply it wherever needed.