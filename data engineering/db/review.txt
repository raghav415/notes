->Remove duplicated:
    ->select distinct col_name
    ->select distinct (col_name1), col_name2
    ->selct count(distinct name)
    ->To keep the “first” row of each group of duplicates where the expression is equal. See the following syntax:
        SELECT DISTINCT ON (column_1), column_2
        FROM tbl_name
->not equal to operator: <> or !=.
->select * from t_n order by name1 ASC, name2 desc;
    ->by default asc.
    ->we can also use where name1, name2 are not retrieved: select addr from t_n order by name1 ASC, name2 desc;
->PostgreSQL returns n number of rows generated by the query. If n is zero or NULL , it produces the result that is same as omitting the LIMIT clause.
    SELECT *
    FROM TABLE
    LIMIT n;
    ->In case you want to skip a number of rows before returning n rows, you use OFFSET clause followed by the LIMIT clause as follows:
        SELECT * FROM table
        LIMIT n OFFSET m;
->The expression value in (1,2) returns true if the value matches any value in the list.
    select * from tb_name value IN (SELECT value FROM tbl_name);
                (or)
    SELECT customer_id, rental_id, return_date
    FROM rental
    WHERE customer_id IN (1, 2)
    ORDER BY return_date DESC;
->You want to know the rental information of customer id 1 and 2:
    SELECT customer_id, rental_id, return_date
    FROM rental
    WHERE customer_id IN (1, 2)
    ORDER BY return_date DESC;
->Can combine with NOT:
    SELECT customer_id, rental_id, return_date
    FROM rental
    WHERE customer_id IN (1, 2)
    ORDER BY return_date DESC;
->We often use the BETWEEN operator in the WHERE clause of a SELECT, INSERT, UPDATE or DELETE statement.
    value BETWEEN low AND high == value >= low and value <= high;
    value NOT BETWEEN low AND high == value < low OR value > high
->LIKE, NOT LIKE:
    ->'%': To match any sequence of characters.
    ->'_': To match any single char.
    SELECT first_name,last_name
    FROM customer
    WHERE first_name LIKE 'Jen%';


    
